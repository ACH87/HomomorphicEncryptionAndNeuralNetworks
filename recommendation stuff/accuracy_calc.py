import keras
from keras.datasets import cifar10
import numpy as np

results = np.array([[258764888,-240048591,-2121662802,-573036628,-1512850389,1785581385,-216010044,593655721,1008288401,-1371007216],
[1696713862,2137936948,593976695,798826281,2134408997,-1842184192,-1494696545,1369927297,536510012,17717521],
[1912080960,1038335013,68276407,-2114700666,-999079036,-948690193,1074624275,-1922644932,1698024826,209571985],
[-2058466532,-1569478071,1976681281,-1830781749,-572241782,-1590793017,956513831,-1339466095,-1198537598,1250593025],
[-1725275585,-1701688058,-1432853125,4369804,-1554245510,156570961,-854626767,-1070545322,2145161974,2053032613],
[1195102815,-1552388119,-1897803887,1618766145,-1728200381,1643997657,543093885,-1736664561,-718220840,-1832986463],
[-1904387839,1070616406,2130163185,996736043,1889990137,-2087600169,1789288465,1406988793,-630916043,-936849417],
[1990865575,-1278518005,1208585061,121923826,-1783231584,152070351,-960263966,1923511854,1403815768,1934893682],
[-1969497023,1587001440,-1642205597,1533189551,-1528560892,89617942,694910241,-1972808585,-107095191,-1198539322],
[-1187014424,-231690823,-1875347360,-608879731,-204645406,1238122352,272693285,-962750680,1558930059,-494559375],
[-977237668,1923525490,-976861396,1486398503,-725491535,-1675700506,-439400925,-587850391,-1606273946,473522373],
[1095290064,1412494896,504650900,551748091,-1428165523,-46302354,-387879547,178332224,347310894,-1990914164],
[-1354339988,64377347,-399182538,168115598,1465691727,-1646304736,2038029318,261668675,-1346673052,-1458599345],
[934795174,1306760922,-1443961526,-974011494,2070552448,830208584,-1418407190,33369825,1790749011,-1136620112],
[-1186606829,-618066598,1967105849,1237207139,-678453938,-887837067,-759285243,-366464400,-384088546,-631969529],
[1623870222,-2078725603,509542789,689003492,-2115458618,150091000,-1632963966,1672214357,1321053701,1383904446],
[-551092333,-945082770,1834000922,1448872650,-713266894,-1409680300,1440216175,-1124718388,1428592734,1961922371],
[1421761815,-508388503,548429779,1959691107,1964788788,-1301603218,-510292822,2098236491,1015582542,1206827973],
[1669080088,-198703539,-981328329,1780332505,-255670999,-1233410557,-996733401,1749227214,-511409096,-914176117],
[-1057874192,-957973881,350980082,-770959651,1935010445,1887965419,-1010385803,507877473,-6234722,1206378205],
[-587751463,751379620,687196544,535767441,-1577195690,710982518,-1108906958,516266108,-1192157199,292845995],
[-1988498118,606011481,147324348,-1666621434,-1398443219,1949590555,2014194153,-601477512,1133451329,41447736],
[1615005480,-1734637689,1228744262,562615780,1757976494,-484968269,546087768,1363080081,-1559457819,1932334472],
[776675384,654465333,1666645820,-1105960553,-13269818,1299952477,1655356475,1191119856,1243980009,-1284097107],
[-1736572473,-1181733691,1028469846,-1894245521,1991781297,2070843708,-1619324477,440232986,253094753,-1792629317],
[1241422072,-498456609,2143795145,2094989861,-1168707121,-126452839,-1327541083,1344616308,680004393,-952515305],
[452730458,-1776285687,746246775,342222431,1985935783,-829692706,1276128523,754661076,477255961,1370886083],
[234696849,411290075,-300606031,-1115766730,175252617,460140544,2017826735,1756980936,746021881,944097648],
[2096546650,1862288524,-29935915,202010024,305931972,-1315267686,341260993,262067790,1050601180,1197263857],
[-1144342699,1115799508,-1983788990,1308789557,-309668657,-1146077819,-1960377948,-517424232,-883815042,16514728],
[-1114440439,-1765842244,-629875457,1585083443,692002294,-514826422,774041187,-1299070649,2138855725,2014809687],
[-2085557037,712976850,-1542969319,1010748062,-123176217,1679934863,-876560724,-1911716109,1766747765,1913013571],
[623562165,-32438363,-447467634,-716065079,623890621,-588585162,1792355687,-925118409,9188301,532341363],
[-1933677138,-1650892194,1125535609,-1994444815,-45623741,-925488881,-1264723109,-1737311607,827112690,2060989246],
[-1811336123,-1875442508,-808883585,1746006806,-875537679,-1197609427,-1823735920,920924456,1515805973,-1741615626],
[705534120,-782321448,-1616916738,733414165,-1898545278,2042250947,1635209483,1772407580,1032150408,2094964107],
[-1198926836,-1626345000,-967555662,853346882,-1185006153,-383071182,-469526245,1466642789,-1128108852,1957868273],
[-1331921712,-87357306,-827725737,1550104831,1558014471,129373758,2002211461,873413359,-590038860,1301089379],
[-1057119116,1715788549,1913196127,-37370516,-1713373416,1928806334,-870318785,1622489262,1959434406,1119939127],
[1840089197,-1458239589,-1209971957,1410038759,-967447404,1166088729,1590754321,1750701581,1447484980,1799754927]
])

(x_train, y_train), (x_test, y_test) = cifar10.load_data()

classes = ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]
num_classes = len(classes)
def get_class_name(class_index):
    if class_index < 0 or class_index > 9:
        raise ValueError("Class Index must be > 0 and <= 9")
    return classes[class_index]

y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

min_counter = 0
max_counter = 0
mid_counter = 0
min_3 = 0
max_3 = 0

map = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}

for res in range(len(results)):
    r = np.argmax(y_test[res])
    if np.argmax(results[res]) == r:
        max_counter += 1
    elif np.argmin(results[res]) == r:
        min_counter +=1

    map[r] = map[r] +1

    #if minimum 3
    if r in results[res].argsort()[:3]:
        min_3 +=1
    elif r in results[res].argsort()[-3:]:
        max_3 +=1
    elif r in results[res].argsort()[4:6]:
        mid_counter+=1

print('min', min_counter/len(results))
print('max', max_counter/len(results))
print('min3', min_3/len(results))
print('max3', max_3/len(results))
print('mid', mid_counter/len(results))

print(map)